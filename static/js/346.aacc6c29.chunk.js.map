{"version":3,"file":"static/js/346.aacc6c29.chunk.js","mappings":"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","sources":["componets/Dialogs/Message/AddMessageForm.jsx","webpack://react_project_education/./src/componets/Dialogs/DialogItem/DialogItem.module.css?6582","componets/Dialogs/DialogItem/DialogItem.jsx","webpack://react_project_education/./src/componets/Dialogs/Dialogs.module.css?887c","webpack://react_project_education/./src/componets/Dialogs/Message/Message.module.css?6eb5","componets/Dialogs/Message/Message.jsx","componets/Dialogs/Dialogs.jsx","componets/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["import { Formik } from 'formik';\nimport { validation } from '../../../utils/validators/validator';\nimport styles from '../../common/FormsControl/FormsControl.module.css'\n\n\n\nconst AddMessageForm = (props) => {\n\n   let maxLength = 50;\n   let newValue = `newMessageBody`;\n\n   let addNewMessage = (values, { setSubmitting }) => {\n      props.sendMessage(values.newMessageBody);\n      setTimeout(() => {\n         values.newMessageBody = \"\"; //очистили форму ввода через 400мс\n         setSubmitting(false); //это активация кнопки после нажатия через 400мс\n      }, 400);\n   }\n\n   return (\n      <div>\n         <Formik\n            initialValues={{ newMessageBody: '' }}\n            validate={(values) => validation(values, maxLength, newValue)}\n            onSubmit={addNewMessage}\n         >\n            {({\n               values,\n               errors,\n               touched,\n               handleChange,\n               handleBlur,\n               handleSubmit,\n               isSubmitting,\n            }) => (\n               <form onSubmit={handleSubmit}>\n                  <div className={errors.newMessageBody && touched.newMessageBody\n                     ? styles.formControl + ' ' + styles.error\n                     : ''}>\n                     <textarea\n                        type=\"text\"\n                        name=\"newMessageBody\"\n                        placeholder=\"Enter your message\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.newMessageBody}\n                        rows='3'\n                        cols='30'\n                     />\n                  </div>\n                  <div className={styles.formControl + ' ' + styles.error}>\n                     {errors.newMessageBody && touched.newMessageBody && errors.newMessageBody}\n                  </div>\n                  <button type=\"submit\" disabled={isSubmitting}>\n                     Send\n                  </button>\n               </form>\n            )}\n         </Formik>\n      </div>\n   )\n}\n\nexport default AddMessageForm;","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__UpJjd\",\"nameLink\":\"DialogItem_nameLink__UrybK\"};","import { NavLink } from 'react-router-dom';\nimport s from './DialogItem.module.css'\n\nconst DialogItem = (props) => {\n   let path = \"/dialogs/\" + props.id;\n   return (\n      <div className={s.dialog}>\n         <img src={props.avatar} alt=\"ava\"/>\n         <NavLink to={path} className={s.nameLink}>{props.name}</NavLink> {/*вместо {\"/dialogs/\" + props.id} можно \"/dialogs/${props.id}\" */}\n      </div>\n   )\n}\n\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__x+LCs\",\"dialogsItems\":\"Dialogs_dialogsItems__tH-gW\",\"messages\":\"Dialogs_messages__qYn-K\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__L82xX\"};","import s from './Message.module.css'\n\n\nconst Message = (props) => {\n   return (\n      <div className={s.message}>\n         {props.message}\n      </div>\n   )\n}\n\nexport default Message;","import AddMessageForm from './Message/AddMessageForm';\nimport DialogItem from './DialogItem/DialogItem';\nimport s from './Dialogs.module.css'\nimport Message from './Message/Message';\n\n\nconst Dialogs = (props) => {\n\n   let state = props.dialogsPage; //создали локальный state\n\n   let dialogsElement = state.dialogs.map(dial => <DialogItem key={dial.id} id={dial.id} name={dial.name} avatar={dial.avatar} />)\n   let messagesElement = state.messages.map(mess => <Message key={mess.id} id={mess.id} message={mess.message} />)\n\n   return (\n      <div className={s.dialogs}>\n\n         <div className={s.dialogsItems}>\n            {dialogsElement}\n         </div>\n\n         <div className={s.messages}>\n            <div>{messagesElement}</div>\n\n            <AddMessageForm sendMessage={props.sendMessage}/>\n\n         </div>\n\n      </div>\n   );\n}\n\n\n\n\nexport default Dialogs;","import { connect } from 'react-redux';\nimport { sendMessageCreator } from '../../Redux/dialogs-reducer';\nimport Dialogs from './Dialogs';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n//import { withRouter } from '../../hoc/withRouter';\n\n\nlet mapStateToProps = (state) => {\n   return {\n      dialogsPage: state.dialogsPage\n   }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n   return {\n      sendMessage: (newMessageBody) => {\n         dispatch(sendMessageCreator(newMessageBody))\n      }\n   }\n}\n\n//const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\n\n//export default DialogsContainer;\n\nexport default compose(\n   //withRouter,\n   connect(mapStateToProps, mapDispatchToProps),\n   withAuthRedirect\n)(Dialogs)","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { withRouter } from \"./withRouter\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n   isAuth: state.auth.isAuth\n})\nexport const withAuthRedirect = (Component) => {\n\n   class RedirectComponent extends React.Component {  //можно сделать и через функциональную компоненту\n\n      render() {\n         //если нет Id в строке браузера, то нет и авторизации - тогда редирект на /login\n         if (this.props.router) {\n            //если нет аутентификации и нет приходящего значения Id из URL, то редирект на /login \n            if (!this.props.isAuth && !this.props.router.params.userId) return <Navigate to='/login' />\n            return <Component {...this.props} />\n         }\n         return <Navigate to='/login' />\n\n         // if (!this.props.isAuth) return <Navigate to='/login' />  //делаем редирект страницы при отсутствии аутентификации\n         //return <Component {...this.props} />\n      }\n   }\n\n   return compose(\n      withRouter, //тогда не нужен withRouter в UsersContainer, DialogsContainer, ProfileContainer\n      connect(mapStateToPropsForRedirect))(RedirectComponent); //законнектили RedirectComponent\n   //т.е. прокинули mapStateToPropsForRedirect через props в RedirectComponent\n\n}\n"],"names":["props","_jsx","children","Formik","initialValues","newMessageBody","validate","values","validation","onSubmit","_ref","setSubmitting","sendMessage","setTimeout","_ref2","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","_jsxs","className","styles","type","name","placeholder","onChange","onBlur","value","rows","cols","disabled","path","id","s","src","avatar","alt","NavLink","to","message","state","dialogsPage","dialogsElement","dialogs","map","dial","DialogItem","messagesElement","messages","mess","Message","AddMessageForm","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","this","router","params","userId","_objectSpread","Navigate","React","withRouter"],"sourceRoot":""}