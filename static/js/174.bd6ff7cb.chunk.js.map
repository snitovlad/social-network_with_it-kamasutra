{"version":3,"file":"static/js/174.bd6ff7cb.chunk.js","mappings":"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","sources":["webpack://react_project_education/./src/componets/Profile/MyPosts/MyPosts.module.css?af06","webpack://react_project_education/./src/componets/Profile/MyPosts/Post/Post.module.css?87d2","componets/Profile/MyPosts/Post/Post.jsx","componets/Profile/MyPosts/Post/AddNewPostForm.jsx","componets/Profile/MyPosts/MyPosts.jsx","componets/Profile/MyPosts/MyPostsContainer.jsx","webpack://react_project_education/./src/componets/Profile/ProfileInfo/ProfileInfo.module.css?6a76","componets/Profile/ProfileInfo/ProfileStatus.jsx","componets/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","componets/Profile/ProfileInfo/ProfileDataForm.jsx","componets/Profile/ProfileInfo/ProfileInfo.jsx","componets/Profile/Profile.jsx","componets/Profile/ProfileContainer.jsx","hoc/withAuthRedirect.js","utils/validators/validator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__RHq+X\",\"posts\":\"MyPosts_posts__cVBHT\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__sxtmb\"};","import s from './Post.module.css'\n\nfunction Post(props) {\n   return (\n      <div className={s.item}>\n         <img src={props.avatar} alt=\"ava\"/>\n         {props.message}\n         <div>\n            <span>like:  </span>{props.likeCount}\n         </div>\n      </div>\n   );\n}\n\nexport default Post;","import { Formik } from 'formik';\nimport {  validation } from '../../../../utils/validators/validator';\nimport styles from '../../../common/FormsControl/FormsControl.module.css'\n\n\n//let maxLength5 = (values) => { maxLengthCreator(5) };\n\n\nconst AddNewPostForm = (props) => {\n\n   let maxLength = 50;\n   let newValue = `newPostText`;\n\n   let onAddPost = (values, { setSubmitting }) => {\n      props.addPost(values.newPostText);\n      setTimeout(() => {\n         values.newPostText = \"\"; //очистили форму ввода через 400мс\n         setSubmitting(false); //это активация кнопки после нажатия через 400мс\n      }, 400);\n   }\n\n   return (\n      <div>\n         <Formik\n            initialValues={{ newPostText: '' }}\n            validate={(values) => validation(values, maxLength, newValue)}\n            onSubmit={onAddPost}\n         >\n            {({\n               values,\n               errors,\n               touched,\n               handleChange,\n               handleBlur,\n               handleSubmit,\n               isSubmitting,\n            }) => (\n               <form onSubmit={handleSubmit}>\n                  <div className={errors.newPostText && touched.newPostText\n                     ? styles.formControl + ' ' + styles.error\n                     : ''}>\n                     <textarea\n                        type=\"text\"\n                        name=\"newPostText\"\n                        placeholder=\"Post message\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.newPostText}\n                        rows='3'\n                        cols='30'\n                     />\n                  </div>\n                  <div className={styles.formControl + ' ' + styles.error}>\n                     {errors.newPostText && touched.newPostText && errors.newPostText}\n                  </div>\n                  <button type=\"submit\" disabled={isSubmitting}>\n                     Add post\n                  </button>\n               </form>\n            )}\n         </Formik>\n      </div>\n   )\n}\n\nexport default AddNewPostForm;","import React from 'react';\nimport s from './MyPosts.module.css'\nimport Post from './Post/Post';\nimport AddNewPostForm from './Post/AddNewPostForm';\n\nconst MyPosts = (props) => {\n\n   let postsElement = props.posts.map(p => <Post key={p.id} message={p.message} likeCount={p.likeCount} avatar={p.avatar} />)\n\n   return (\n      \n      <div className={s.postsBlock}>\n\n         <h3>My posts</h3>\n\n         <AddNewPostForm addPost={props.addPost} />\n\n         <div className={s.posts}>\n            {postsElement}\n         </div>\n\n      </div>\n   );\n}\n\nexport default MyPosts;","import { addPost, addPostActionCreate } from '../../../Redux/profile-reducer';\nimport MyPosts from './MyPosts';\nimport { connect } from 'react-redux';\n  \n\nlet mapStateToProps = (state) => {\n   return {\n      posts: state.profilePage.posts,\n      newPostText: state.profilePage.newPostText\n   }\n}\n\n// let mapDispatchToProps = (dispatch) => {\n//    return {\n//       addPost: (newPostText) => {\n//          dispatch(addPostActionCreate(newPostText))\n//       }\n//    }\n// }\n\nconst MyPostsContainer = connect(mapStateToProps, { addPost })(MyPosts); //переписали без mapDispatchToProps\n\nexport default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"imageProfile\":\"ProfileInfo_imageProfile__J6YqA\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__jrDiE\",\"addPhotoButton\":\"ProfileInfo_addPhotoButton__XtFup\",\"addForm\":\"ProfileInfo_addForm__doi0a\",\"contact\":\"ProfileInfo_contact__WAnWH\",\"contactsInFormBlock\":\"ProfileInfo_contactsInFormBlock__383v-\",\"contactsInForm\":\"ProfileInfo_contactsInForm__AeFiv\",\"errorContacts\":\"ProfileInfo_errorContacts__ljwFB\",\"error\":\"ProfileInfo_error__cqlws\"};","import React from \"react\";\n\n\nclass ProfileStatus extends React.Component {\n\n   state = {\n      editMode: false,\n      status: this.props.status\n   }\n\n   activateEditMode = () => {\n      this.setState({  //это асинхронный метод, внутрь к-рого передаем объект, к-рый перезапишет св-ва в локальном state\n         editMode: true\n      })\n   }\n\n   deactivateEditMode = () => {  //человек перестал редактировать\n      this.setState({  //это асинхронный метод, внутрь к-рого передаем объект, к-рый перезапишет св-ва в локальном state\n         editMode: false\n      });\n      this.props.updateStatus(this.state.status);\n   }\n\n   onStatusChange = (event) => {\n      this.setState ({     //в state меняем только св-во status\n         status: event.currentTarget.value  //получили новое значение value\n      });\n   }\n\n   componentDidUpdate(prevProps, prevState) {  //для синхронизации локального и глобального state при обновлении\n      if (prevProps.status !== this.props.status) {\n         this.setState({\n            status: this.props.status\n         })\n      }\n   }\n\n   render() {\n      return (\n         <div>\n            {!this.state.editMode &&\n               <div>\n                   <span  onClick={this.activateEditMode}>{this.props.status || '--статус отсутствует--'}</span>  {/*ставили onDoubleClick */}\n               </div>\n            }\n            {this.state.editMode &&\n               <div>\n                  <input onChange={this.onStatusChange} autoFocus={true} \n                  onBlur={this.deactivateEditMode} value={this.state.status} />\n            {/* onBlur - срабатывает когда уходит фокус с элемента    */}\n            {/* autoFocus={true} - автоматически помещает фокус в input */}\n               </div>\n            }\n         </div>\n      )\n   }\n}\n\nexport default ProfileStatus;","import { useEffect, useState } from \"react\"\n\nconst ProfileStatusWithHooks = (props) => {\n\n   let [editMode, setEditMode] = useState(false);\n   let [status, setStatus] = useState(props.status);\n\n   useEffect( () => {\n      setStatus(props.status)\n   }, [props.status]);  //зависимость вызова useEffect\n\n\n   const activateEditMode = () => {\n      setEditMode(true);\n   }\n\n   const deactivateEditMode = () => {\n      setEditMode(false);\n      props.updateStatus(status); //отправили статус на сервер\n   }\n\n   const onStatusChange = (event) => {\n      setStatus (event.currentTarget.value);\n   }\n\n\n   return (\n      <div>\n         {!editMode &&\n            <div>\n                <b>Status</b>: <span  onClick={activateEditMode}>{props.status || '--статус отсутствует--'}</span>  \n            </div>\n         }\n         {editMode &&\n            <div>\n               <input  onChange={onStatusChange} onBlur={deactivateEditMode} value={status} autoFocus={true} \n                 />\n            </div>\n         }\n      </div>\n   )\n}\n\n   export default ProfileStatusWithHooks;\n","import React from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport s from './ProfileInfo.module.css'\nimport { MyCheckbox, MyTextInput, MyTextarea } from '../../common/FormsControl/FormsControl';\n\n//компонент для формы в режиме редактирования профил\nconst ProfileDataForm = ({ profile, handleSubmit, isSubmitting, error }) => {\n\n   //из сообщения об ошибке с сервера достаем название поля\n   let errorField = null;\n   if (error) {\n      errorField = error.split(\"->\");\n      if (errorField != error) { //т.к. в некоторых полях нет \"->\"\n         errorField = errorField[1].slice(0, errorField[1].length - 1)\n         errorField = errorField.charAt(0).toLowerCase() + errorField.slice(1);\n      }\n   }\n\n   return (\n      <Formik\n         initialValues={profile} //получаем инициализационные данные из profile\n         validationSchema={Yup.object({\n            fullName: Yup.string()\n               .max(15, 'Must be 15 characters or less')\n               .required('Required'),\n            lookingForAJobDescription: Yup.string()\n               .max(15, 'Must be 15 characters or less')\n               .required('Required'),\n            aboutMe: Yup.string()\n               .max(15, 'Must be 15 characters or less')\n               .required('Required')\n         })}\n         onSubmit={handleSubmit}\n      >\n\n         <Form className={s.addForm}>\n            <div>\n               <MyTextInput label=\"Full Name\" name=\"fullName\" type=\"text\" placeholder=\"My full name\" />\n            </div>\n            <div>\n               <MyCheckbox name=\"lookingForAJob\">Looking for a job</MyCheckbox>\n            </div>\n            <div>\n               <MyTextarea label=\"My professional skills\" name=\"lookingForAJobDescription\"\n                  type=\"text\" placeholder=\"My professional skills\" />\n            </div>\n            <div>\n               <MyTextarea label=\"About me\" name=\"aboutMe\" type=\"text\" placeholder=\"About me\" />\n            </div>\n\n            <div className={s.contactsInFormBlock}>\n\n               {/* пробежимся map-пом и отобразим контакты из вложенного объекта contacts */}\n               <b className={s.contactsInForm}>Contacts:</b>\n               {Object.keys(profile.contacts).map(key => {\n                  return (\n                     <div key={key} className={s.contact + ' ' + (key === errorField ? s.errorContacts : null)} >\n                        <MyTextInput label={key + \":\"} name={\"contacts.\" + key} type=\"text\" placeholder={key} />\n                     </div>\n                  )\n               })}\n            </div>\n\n            {/* вставим описание ошибки, которое пришло с сервера */}\n            {error ? <div className={s.error}>{error}</div> : null}\n            \n            <div><button type=\"submit\" disabled={isSubmitting}>save</button></div>\n         </Form>\n      </Formik>\n   )\n}\nexport default ProfileDataForm;","import { useState } from 'react';\nimport Preloader from '../../common/Preloader/Preloader';\nimport { photo } from '../../common/UserPhoto/userPhoto';\nimport s from './ProfileInfo.module.css'\nimport ProfileStatus from './ProfileStatus';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\nimport ProfileDataForm from './ProfileDataForm';\n\nconst ProfileInfo = (props) => {\n\n   //let [editMode, setEditMode] = useState(false); //добавили локальный state\n\n   if (!props.profile) {  //если нету profile, то вернуть крутилку (работает только с null (profile: null) \n      return <Preloader />  //не работает с (profile: []) будет ошибка при обращении к вложенному объекту)\n   }                          // нужно условие ({props.profile&&props.profile.contacts&&props.profile.contacts.facebook})\n\n   const onMainPhotoSelected = (e) => { //обработчик событий при клике по кнопке file\n      if (e.target.files.length) {  //можно (e.target.files[0])\n         //при клике по кнопке вызываем коллбэк savePhoto. Он передан из ProfileContainer из connect\n         props.savePhoto(e.target.files[0]);\n      }\n   }\n\n   // const handleSubmit = (values, { setSubmitting }) => {\n   //    setTimeout(() => {\n   //       alert(JSON.stringify(values, null, 2));\n   //       setSubmitting(false);\n   //    }, 4000);\n   // }\n\n   const handleSubmit = (values, { setSubmitting }) => {\n      props.saveProfile(values);\n      setSubmitting(false);\n   }\n\n   return (\n      <div>\n\n         {/* <div className={s.imageProfile}>  \n            <img src='https://cdn.pixabay.com/photo/2018/04/16/16/16/sunset-3325080_1280.jpg' alt=\"img\"/>\n         </div> */}\n\n         <div className={s.descriptionBlock}>\n            {photo(props.profile, 'large')}\n            {/* <img src={props.profile.photos.large || userPhoto} alt=\"photo\" /> */}\n\n            {/* покажем кнопку выбора файла аватарки, если это наш профиль */}\n            <div className={s.addPhotoButton}>\n               {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\n            </div>\n            <div >\n               {/* покажем режим редактирования если editMode: true */}\n               {props.editMode\n                  ? <ProfileDataForm profile={props.profile}\n                     handleSubmit={handleSubmit} error={props.error} />\n                  : <ProfileData goToEditMode={() => { props.setEditMode(true) }}\n                     profile={props.profile} isOwner={props.isOwner} />}\n            </div>\n            {/* <div><ProfileData profile={props.profile}/></div> */}\n\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus} />\n         </div>\n\n      </div>\n   );\n}\n\n\n//компонент для данных в профиле\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\n\n   return <div>\n      {/* покажем кнопку режима редактирования если Owner */}\n      {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\n\n      <div>\n         <b>Full name</b>: {profile.fullName}\n      </div>\n      <div>\n         <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\n      </div>\n      {\n         profile.lookingForAJob &&\n         <div>\n            <b>My skills</b>: {profile.lookingForAJobDescription}\n         </div>\n      }\n      <div>\n         <b>About me</b>: {profile.aboutMe}\n      </div>\n      {(Object.keys(profile.contacts).filter(key => {\n         return profile.contacts[key] != \"\" && profile.contacts[key] != null\n      })) != false        //если нет контактов вообще - скрывает всё вместе с надписью Contacts\n         ? <div>\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n               return (\n                  profile.contacts[key] //скрываем контакты внутри Contacts, если там ничего нет\n                     ? <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\n                     : null\n               )\n            })\n            }\n         </div>\n         : null}\n   </div>\n}\n\n//компонент для контактов\nconst Contact = ({ contactTitle, contactValue }) => {\n   return <div className={s.contact}>\n      <b>{contactTitle}</b>: {contactValue}\n   </div>\n}\n\n\n\nexport default ProfileInfo;","import MyPostsContainer from './MyPosts/MyPostsContainer';\n//import s from './Profile.module.css'\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\n\nfunction Profile(props) {\n   return (\n      <div >\n\n         <ProfileInfo profile={props.profile}\n            isOwner={props.isOwner}\n            savePhoto={props.savePhoto}\n            status={props.status}\n            saveProfile={props.saveProfile}\n            updateStatus={props.updateStatus}\n            error={props.error} \n            setEditMode={props.setEditMode}\n            editMode={props.editMode}/>\n         <MyPostsContainer /*store = {props.store}*/ />\n      </div>\n   );\n}\n\nexport default Profile;","import Profile from './Profile';\nimport { connect } from 'react-redux';\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile, setEditMode } from '../../Redux/profile-reducer';\n//import { useParams } from 'react-router-dom'; //import { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\nimport { withRouter } from '../../hoc/withRouter'; //вынесли в HOC с useParam отдельно\nimport React from 'react';\n\nclass ProfileContainer extends React.Component {\n\n   refreshProfile() { //создали вспомогательный метод, чтобы не было дублирования кода\n      //let userId = this.props.match.params.userId; //было так частный случай\n      let userId = this.props.router.params.userId;  //более общий случай\n\n      if (!userId) {  //если вдруг просто /profile без userId\n         //userId = 29243;\n         userId = this.props.authorizedUserId;\n      }\n      // if (!userId) {     //так почему то не работает. Сделали через модифицированный withAuthRedirect\n      //    this.props.router.navigate('/login');\n      // }\n\n      this.props.getUserProfile(userId);\n      //setTimeout (() => {this.props.getStatus(userId);}, 1000)\n      this.props.getStatus(userId);\n   }\n\n   componentDidMount() {\n      this.refreshProfile();\n   }\n\n   //устраняем баг, чтобы показывало наш профиль при клике на Profile после перехода от клика по юзеру\n   componentDidUpdate(prevProps, prevState, snapshot) {\n      if (this.props.router.params.userId != prevProps.router.params.userId) { //условие чтобы не было зацикленности\n         this.refreshProfile();\n      }\n   }\n\n   render() {\n      return (\n         <Profile {...this.props}\n            isOwner={!this.props.router.params.userId} //если нет id то я собственник - булево значение (для фото аватарки)\n            savePhoto={this.props.savePhoto}\n            profile={this.props.profile}\n            status={this.props.status}\n            updateStatus={this.props.updateStatus}\n            saveProfile={this.props.saveProfile}\n            error={this.props.error}\n            setEditMode={this.props.setEditMode}\n            editMode={this.props.editMode} />\n      );\n   }\n}\n\nlet mapStateToProps = (state) => ({\n   profile: state.profilePage.profile,\n   status: state.profilePage.status,\n   authorizedUserId: state.auth.userId,\n   isAuth: state.auth.isAuth,\n   error: state.profilePage.error,\n   editMode: state.profilePage.editMode\n})\n\nexport default compose(\n   connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile, setEditMode }),\n   withRouter, //создали отдельный HOC, в общем не нужен, так есть в withAuthRedirect\n   withAuthRedirect //тоже hoc\n)(ProfileContainer)\n\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Navigate } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { withRouter } from \"./withRouter\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n   isAuth: state.auth.isAuth\n})\nexport const withAuthRedirect = (Component) => {\n\n   class RedirectComponent extends React.Component {  //можно сделать и через функциональную компоненту\n\n      render() {\n         //если нет Id в строке браузера, то нет и авторизации - тогда редирект на /login\n         if (this.props.router) {\n            //если нет аутентификации и нет приходящего значения Id из URL, то редирект на /login \n            if (!this.props.isAuth && !this.props.router.params.userId) return <Navigate to='/login' />\n            return <Component {...this.props} />\n         }\n         return <Navigate to='/login' />\n\n         // if (!this.props.isAuth) return <Navigate to='/login' />  //делаем редирект страницы при отсутствии аутентификации\n         //return <Component {...this.props} />\n      }\n   }\n\n   return compose(\n      withRouter, //тогда не нужен withRouter в UsersContainer, DialogsContainer, ProfileContainer\n      connect(mapStateToPropsForRedirect))(RedirectComponent); //законнектили RedirectComponent\n   //т.е. прокинули mapStateToPropsForRedirect через props в RedirectComponent\n\n}\n","export const validation = (values, maxLength, newValue) => {\n   const errors = {};\n   if (!values[newValue]) {\n      errors[newValue] = 'Field is required';\n      return errors\n   }\n\n   else if (values[newValue].length > maxLength) {\n      errors[newValue] = `Max length is ${maxLength} simbols`;\n      return errors\n   }\n  \n   return undefined;\n};\n\nexport const validationLogin = (values, maxLength, newValue, validationPassword) => {\n   const errors = {};\n   if (!values[newValue]) {\n      errors[newValue] = 'Field is required';\n      return errors\n   }\n\n   else if (values[newValue].length > maxLength) {\n      errors[newValue] = `Max length is ${maxLength} simbols`;\n      return errors\n   }\n   \n\n   if (!values[validationPassword]) {\n      errors[validationPassword] = 'Field is required';\n      return errors\n   }\n   else if (values[validationPassword].length > maxLength) {\n      errors[validationPassword] = `Max length is ${maxLength} simbols`;\n      return errors\n   }\n  \n   return undefined;\n};"],"names":["props","_jsxs","className","s","children","_jsx","src","avatar","alt","message","likeCount","Formik","initialValues","newPostText","validate","values","validation","onSubmit","_ref","setSubmitting","addPost","setTimeout","_ref2","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","styles","type","name","placeholder","onChange","onBlur","value","rows","cols","disabled","postsElement","posts","map","p","Post","id","AddNewPostForm","connect","state","profilePage","MyPosts","React","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","onClick","event","currentTarget","updateStatus","autoFocus","profile","error","errorField","split","slice","length","charAt","toLowerCase","validationSchema","Yup","fullName","max","required","lookingForAJobDescription","aboutMe","Form","MyTextInput","label","MyCheckbox","MyTextarea","Object","keys","contacts","key","ProfileData","isOwner","goToEditMode","lookingForAJob","filter","Contact","contactTitle","contactValue","_ref3","Preloader","photo","e","target","files","savePhoto","ProfileDataForm","saveProfile","ProfileStatusWithHooks","ProfileInfo","MyPostsContainer","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","userId","this","router","params","authorizedUserId","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Profile","_objectSpread","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToPropsForRedirect","Component","RedirectComponent","Navigate","to","maxLength","newValue","concat"],"sourceRoot":""}